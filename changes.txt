jboot v2.0-rc.4:
新增：注解可以通过${key}来指定读取配置的功能，支持 ${key:value} 的方式设置默认值
新增：onJFinalStartedBefore() 监听，可以在项目启动的时候做一些必须的初始化
新增：JbootActionHandler 新增 getAction() 方法，方便子类复写从而可以实现 "动态路由" 和 Controler 的动态添加功能
新增：工具类 FileScanner，用于对文件进行扫描和监听文件动态
新增：JbootResourceLoader，用于在 Maven 多 Module 的情况下自动对文件进行热加载
新增：JFinalHandlers 添加 getHandlers() 和 setActionHandler() 方法
新增：Columns 新增 or() 方法的支持，用于添加 Sql 的 OR 逻辑
优化：save() 和 saveOrUpdate() 方法返回 Object，而不是 `<T> T`
优化：增强 SPI 功能，当未在 META-INF 定义 Service 接口的时候，可以进行 SPI 发现
优化：优化通过 Column 和 Columns 查询的时候，生成 Sql 的代码逻辑，增强性能
优化：JbootHttpKit 重命名为 HttpUtil、新增 handle 方法
优化：重命名代码生成器的模板文件，以 .tp 结尾
修复: HttpUtil.downlaod() 返回内容错误的问题
修复：Swagger下载不同版本的资源文件可能导致替换url不正确的问题
修复：Swagger配置contextPath的情况下无法正确访问的问题


jboot v2.0-rc.3:
新增：JbootCache模块的空实现 NoneCacheImpl，方便通过配置关闭缓存功能
新增：Jboot 代码生成器添加排除表和移除前缀的支持
优化：当未对 RPC 模块进行配置的情况下，该功能默认关闭，不会启用dubbo等 RPC 组件
优化：更新相关依赖


jboot v2.0-rc.2:
移除 javax 的 @Inject 功能
移除 jboot.app.hotSwapClassPrefix 的配置，直接使用 undertow.hotSwapClassPrefix 配置即可
修复 代码生成器生成的代码带有 @Singleton 注解的问题
优化 @RPCInject 中的 async 和 check 的类型
优化 ClassScanner 会扫描到 JRE 的 Class 导致加载速度慢的问题


jboot v2.0-rc.1:
移除Server模块，引入JFinal-Undertow，完美支持各种热加载。
移除Hystrix，Dubbo内置降级功能、同时 DockerStack 可以很好完成。
移除Google Guice，使用 JFinal AOP 功能代替。
移除统一配置中心，Jboot 的配置来源可以是配置文件、环境变量、启动参数、Jvm等多个地方，因此通过 DockerStack 可以完成统一配置
移除opentracing，链路追踪由 DockerStack 来完成
移除网络限流模块，由 DockerStack 来完成
Jboot.me().getXXX 直接修改为：Jboot.getXxx()
升级Sharding-jdbc到3.x ，通过 Sharding-shpere 加 JFinal ActiveRecordPlugin 完美实现数据库读写分离、分库分表和分布式事务。
RPC注入和暴露修改为 RPCInject 和 RPCBean，删除RPCService
Model 进行 save() 的时候返回 Id，而不是 bool 类型，方便微服务调用的时候，直接返回ID，而不需要再次查询。
所有配置优先读取启动参数和环境变量，方便在docker、k8s 环境下做自动化部署
添加 @ConfigInject 用于对Controller、Service等属性的配置数据注入
完善 ClassScanner 机制，支持外部自定义扫描和排除
优化 Join 机制，支持 RPC 调用 Join、支持 Join 返回数据、支持 Join 自定 Model 属性，生成代码默认不再带有 Join 的代码生成 ，使 Service 更加轻便。
MQ 新增 startListener() 方法，而非是项目启动后自动监听。方便 MQ 的 Listener 做其他初始化工作。同时 MQ 支持自定义序列化等功能。